# The measured data will be stored in an in-memory database using Java,
# and the Raspberry Pi sensor will be continuously sending real-time measurement data



openapi: 3.0.3
info:
  title: SWVS HA Raspberry Pi and MQTT - Measurement Data API
  description: API Documentation for Measurement Data (Messdaten)
  version: 1.0.0

tags:
  - name: Measurements
    description: Measurement Data operations.

#GET /measurements :To retrive all stored measurement data from the database
path:
  /measurements:
    get:
      tags:
        - measurements
      summary: Get all Measurements
      description: Fetches all recorded measurements from te database.
      operationId: getAllMeasurements
      responses:
        '200':
          description: All Measurement retrieved successfully.
          content:
            application/json:
              schema:
                type: array # Returns an array of measurement objects
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Unique ID of the measurement.
                      example: 11
                    sensorID:
                      type: integer
                      description: Sensor ID.
                      example: 1
                    timestamp:
                      type: string
                      format: date-time
                      description: Time of the measurement.
                      example: "2024-10-11T10:20:30Z"
                    temperature:
                      type: number
                      format: float
                      description: Temperature value in Celsius.
                      example: 21.5
                    humidity:
                      type: number
                      format: float
                      description: Humidity percentage.
                      example: 56.5
        '404':
          description: Measurement not found.

# POST /measurements: To allow the Raspberry Pi sensor to send new measurement data,
# which will then be stored in the in-memory database.
    post:
      tags:
        - measurements
      summary: Add new measurement
      description: Receives new measurement data from the sensor and stores it in the in-memory database.
      operationId: addMeasurement
      requestBody:
        description: Measurement data received from the sensor.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sensorID:
                  type: integer
                  description: Sensor ID.
                  example: 1
                timestamp:
                  type: string
                  format: date-time
                  description: Time of the measurement.
                  example: "2024-10-11T10:20:30Z"
                temperatuere:
                  type: number
                  format: float
                  description: Temperature value in Celsius.
                  example: 21.5
                humidity:
                  type: number
                  format: float
                  description: Humidity percentage.
                  example: 56.5
      responses:
          '201':
            description: Measurement added successfully.

#Get /measurements/{measurementId}: -To retrive a specific measurement using its ID.

  /measurements/{measurementId}:
    get:
      tags:
        - Measurements
      summary: Get a specific measurement
      description: Fetches a specific measurement by its ID from the in-memory database.
      operationId: getMeasurementById
      parameters:
        - name: measurementId
          in: path
          description: ID of the measurement
          required: true
          schema:
            type: integer
          examples: 1
      response:
        '201':
          description: Measurement retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Unique ID of the measurement.
                    example: 11
                  sensorID:
                    type: integer
                    description: Sensor ID.
                    example: 1
                  timestamp:
                    type: string
                    format: date-time
                    description: Time of the measurement.
                    example: "2024-10-11T10:20:30Z"
                  temperature:
                    type: number
                    format: float
                    description: Temperature value in Celsius.
                    example: 21.5
                  humidity:
                    type: number
                    format: float
                    description: Humidity percentage.
                    example: 56.5
        '404':
          description: Measurement not found.
