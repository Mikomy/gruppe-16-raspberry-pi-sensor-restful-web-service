openapi: 3.0.3
info:
  title: Sensor Management Service
  description: This sevice mananges sensor metadata like names and locations.
  version: 1.0.0
tags:
  - name: sensors
    description: API for managing sensors.
paths:
  # GET /sensors: Retrieve all sensors
  /sensors:
    get:
      tags:
        - sensors
      summary: Get all sensors.
      description: Fetches all recorded sensors from the database.
      operationId: getAllSensors
      responses:
        '200':
          description: All sensors retrieved successfully.
          content:
            application/json:
              schema:
                type: array # Returns an array of sensor objects
                items:
                  type: object
                  properties:
                    sensorId:
                      type: integer
                      description: Unique ID of the sensor.
                      example: 1
                    name:
                      type: string
                      description: Name of the sensor.
                      example: "Temperature Sensor"
                    location:
                      type: string
                      description: Location of the sensor.
                      example: "Kitchen"
        '404':
          description: No sensors found.

    post:
      tags:
        - sensors
      summary: Add a new sensor.
      description: Add a new sensor record in the database.
      operationId: addSensor
      requestBody:
        description: The sensor data to add.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sensorId:
                  type: integer
                  description: Unique ID of the sensor.
                  example: 1
                name:
                  type: string
                  description: Name of the sensor.
                  example: "Temperature Sensor"
                location:
                  type: string
                  description: Location of the sensor.
                  example: "Kitchen"
      responses:
        '201':
          description: Sensor created successfully.
        '400':
          description: Invalid input data.

# GET /sensor/{sensorId}: Retrieve a specific sensor by ID.
  /sensors/{sensorId}:
    get:
      tags:
        - sensors
      summary: Get a specific sensor by ID.
      description: Fetches a specific sensor record from the database by its ID.
      operationId: getSensorById
      parameters:
        - name: sensorId
          in: path
          description: ID of the sensor to retrieve
          required: true
          schema:
            type: integer
          example: 11
      responses:
            '200':
              description: Sensor retrieved successfully.
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      sensorId:
                        type: integer
                        description: Unique ID of the sensor.
                        example: 11
                      name:
                        type: string
                        description: Name of the sensor.
                        example: "Temperature Sensor"
                      location:
                        type: string
                        description: Location of the sensor.
                        example: "Kitchen"
            '404':
              description: Sensor not found.
    put:
      tags:
        - sensors
      summary: Update a specific existing sensor.
      description: Updates a specific existing sensor's details by its ID in the database.
      operationId: updateSensorById
      parameters:
        - name: sensorId
          in: path
          description: ID of the sensor to update
          required: true
          schema:
            type: integer
          example: 11
      requestBody:
        description: The updated sensor data.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sensorId:
                  type: integer
                  description: Unique ID of the sensor.
                  example: 11
                name:
                  type: string
                  description: Name of the sensor.
                  example: "Temperature Sensor (Updated)"
                location:
                  type: string
                  description: Location of the sensor.
                  example: "Kitchen (Updated)"
      responses:
        '200':
          description: Sensor updated successfully.
        '404':
          description: Sensor not found.
        '400':
          description: Invalid input data.

    delete:
      tags:
        - sensors
      summary: Delete a specific sensor by ID.
      description: Deletes a specific sensor record from the database by its ID.
      operationId: deleteSensorById
      parameters:
        - name: sensorId
          in: path
          description: ID of the sensor to delete
          required: true
          schema:
            type: integer
          example: 11
      responses:
        '204':
          description: Sensor deleted successfully.
        '404':
          description: Sensor not found.

  /sensor/{sensorId}/measurements:
    get:
      tags:
        - sensors
      summary: Retrieve measurements for a specific sensor.
      description: Fetches all measurements recorded for a specific sensor from the database.
      operationId: getSensorMeasurements
      parameters:
        - name: sensorId
          in: path
          description: ID of the sensor to retrieve measurements for
          required: true
          schema:
            type: integer
          example: 11
      responses:
        '200':
          description: Measurements retrieved successfully.
          content:
            application/json:
              schema:
                type: array # Returns an array of measurement objects
                items:
                  type: object
                  example:
                    - measurementId: 0
                      sensorEntity:
                        sensorId: 0
                        name: "Temperature Sensor"
                        location: "Kitchen"
                      timestamp: "2024-10-12T21:07:01.269Z"
                      temperature: 21.5
                      humidity: 56.5
        '404':
          description: Measurement not found.




